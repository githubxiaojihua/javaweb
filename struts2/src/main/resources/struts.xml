<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE struts PUBLIC
        "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
        "http://struts.apache.org/dtds/struts-2.3.dtd">
<struts>


    <!-- 可以覆盖前面加载的配置文件内容 设置了请求的action后缀名必须是.abc-->
    <!--<constant name="struts.action.extension" value="abc"></constant>-->

    <!-- 使用动态方法 -->
    <constant name="struts.enable.DynamicMethodInvocation" value="true"></constant>

    <!-- name: 包名 对于咱们来说意义不大 作用:给别人继承用
	extends: 继承  默认值:默认继承struts2提供的一个包 包名:struts-default
			 继承哪个包 那这个包下的所有东西都有一份

	namespace: 名称空间   和浏览器访问地址相关
	abstract:抽象的 默认是false 如果写成了true 代表当前的pageage下面不能出现action 他们2个是互斥的
		     该包只能被用来继承
	-->
    <package name="abc" extends="struts-default" namespace="/">
        <!--做action的地址访问路径
        name:action的名字  和浏览器访问地址相关
        namespace和name 组成了当前action的访问地址
        class:全限定名
        method: 可以不写 默认就是执行叫一个execute的方法
        第一中创建Action的方式，一个普通的java类，只要有execute方法即可
        -->
        <action name="hello" class="com.xiaojihua.struts.action.ActionDemo1">
            <result name="abc">/jsp/demo.jsp</result>
        </action>
    </package>

    <!-- 引入外部的action配置  -->
    <!--<include file="struts_user.xml"></include>-->

    <package name="test2" extends="struts-default" namespace="/">

        <!-- 全局的逻辑视图页面配置  针对的是当前包下面所有的action都生效-->
        <global-results>
            <result name="ok">/jsp/ok.jsp</result>
        </global-results>
        <!-- 第二种创建action的方式，从实现Action接口 -->
        <action name="hello2" class="com.xiaojihua.struts.action.ActionDemo2">
            <result name="success">/jsp/demo.jsp</result>
        </action>
        <!-- 第二种创建action的方式，从ActionSupport继承，覆盖其execute方法 -->
        <action name="hello3" class="com.xiaojihua.struts.action.ActionDemo3">
        </action>

        <!-- Action的3中访问方式 -->
        <!-- 普通访问 -->
        <action name="product_save" class="com.xiaojihua.struts.action.ActionDemo4" method="save">
        </action>
        <action name="product_delete" class="com.xiaojihua.struts.action.ActionDemo4" method="delete">
        </action>
        <action name="product_update" class="com.xiaojihua.struts.action.ActionDemo4" method="update">
        </action>
        <action name="product_find" class="com.xiaojihua.struts.action.ActionDemo4" method="find">
        </action>

        <!-- 通配符访问 -->
        <action name="product_*" class="com.xiaojihua.struts.action.ActionDemo4" method="{1}">
        </action>

        <!-- 动态访问 需要开启常量DynamicMethodInvocation-->
        <action name="product" class="com.xiaojihua.struts.action.ActionDemo4">

        </action>

        <!-- 获取Servlet的API访问方式
         通过ServletActionContext的方式获取servlet api
        <action name="ad5" class="com.xiaojihua.struts.action.ActionDemo5">

        </action>
         通过ActionContext的方式获取servlet api
        <action name="ad6" class="com.xiaojihua.struts.action.ActionDemo6">

        </action>
         通过实现不同的接口来获取servlet api
        <action name="ad7" class="com.xiaojihua.struts.action.ActionDemo7">

        </action>

         证明了action 是多实例
        <action name="ad8" class="com.xiaojihua.struts.action.ActionDemo8">

        </action>-->

    </package>

    <package name="test3" extends="struts-default" namespace="/">
        <action name="ad9" class="com.xiaojihua.struts.action.ActionDemo9">
            <!-- name属性默认值是success 如果action返回的逻辑视图名是字符串:success name可以省略不写
											  但如果是其它的 一定要写

						 type:要跳转的类型
						 	 dispatcher 默认值 用于请求转发到页面，服务器内部转发浏览器地址不变
						 	 redirect 用于重定向到页面，浏览器地址会变

						 	 chain 用于请求转发到action
						 	 redirectAction 用于重定向到action

					 -->
            <!--<result type="redirect">/jsp/ok.jsp</result>-->
            <!-- 测试请求转发到action -->
            <result type="chain">ad10</result>
        </action>

        <action name="ad10" class="com.xiaojihua.struts.action.ActionDemo10">

        </action>

        <!-- 测试struts的属性封装 基本类型和String类型 -->
        <action name="ad11" class="com.xiaojihua.struts.action.ActionDemo11">

        </action>

        <!-- 测试struts的属性封装 对象类型 需要在对应的form表单中使用OGNL表达式 比如user.userName-->
        <action name="ad12" class="com.xiaojihua.struts.action.ActionDemo12">

        </action>

        <!-- 测试struts的属性封装 复杂类型 list和map 需要在对应的form表单中使用OGNL表达式，比如list[0].userName-->
        <action name="ad13" class="com.xiaojihua.struts.action.ActionDemo13">

        </action>

        <!-- 测试struts的属性封装 模型封装-->
        <action name="ad14" class="com.xiaojihua.struts.action.ActionDemo14">

        </action>

        <!-- 获取值栈内部结构-->
        <action name="ad15" class="com.xiaojihua.struts.action.ActionDemo15">
            <result name="success">/jsp/valueStackDemo.jsp</result>
        </action>

        <!-- 通过成员属性的方式往值栈的root区域存储数据-->
        <action name="ad16" class="com.xiaojihua.struts.action.ActionDemo16">
            <result name="success">/jsp/valueStackDemo2.jsp</result>
        </action>

        <!-- 通过值栈api的方式往值栈的root区域存储数据-->
        <action name="ad17" class="com.xiaojihua.struts.action.ActionDemo17">
            <result name="success">/jsp/valueStackDemo3.jsp</result>
        </action>

        <!-- 往值栈的context区域存储数据-->
        <action name="ad18" class="com.xiaojihua.struts.action.ActionDemo18">
            <result name="success">/jsp/valueStackDemo4.jsp</result>
        </action>

        <!-- 特殊符号$的使用，在配置文件中获取值栈中的数据-->
        <action name="ad19" class="com.xiaojihua.struts.action.ActionDemo19">
            <!-- 直接从值栈中获取数据  ym =/jsp/demo7.jsp 用于下载
                ym的值在ActionDemo19中已经通过成员属性的方式设置到了值栈中
            -->
            <result name="success">${ym}</result>
        </action>


        <!-- 页面获取数据的另一种方式通过[index]的方式来获取-->
        <action name="ad20" class="com.xiaojihua.struts.action.ActionDemo20">
            <result name="success">/jsp/valueStackDemo8.jsp</result>
        </action>
    </package>

    <package name="intersceptor" extends="struts-default" namespace="/">
        <!-- 为package包下面的所有action配置拦截器
             配置的时候注意如果写了default-interceptor-ref的话
             那么原来struts默认的拦截器就被覆盖掉不执行了
             比如modelDriven也不执行了，那就没有办法进行模型封装了
             因此在下面的interceptor-stack中要加上
             原来struts提供的拦截器组

             全局拦截器
        -->
        <interceptors>
            <interceptor name="myinterceptor1" class="com.xiaojihua.struts.interscepter.MyInterceptor1"/>
            <interceptor name="myinterceptor2" class="com.xiaojihua.struts.interscepter.MyInterceptor2"/>
            <interceptor name="myinterceptor3" class="com.xiaojihua.struts.interscepter.MyInterceptor3">
                <!-- 指定不拦截的方法 -->
                <param name="excludeMethods">findAll</param>
            </interceptor>
            <interceptor-stack name="myinterceptors">
                <!-- 可以指定拦截器组，将struts的默认拦截组纳入进来 -->
                <interceptor-ref name="defaultStack"/>
                <interceptor-ref name="myinterceptor1"/>
                <interceptor-ref name="myinterceptor2"/>
                <interceptor-ref name="myinterceptor3"/>
            </interceptor-stack>
        </interceptors>
        <default-interceptor-ref name="myinterceptors"/>

        <!-- 局部拦截器：也可为某一个action指定拦截器和拦截器组 -->
        <action name="ad21" class="com.xiaojihua.struts.action.ActionDemo21">
            <!-- 如果只定义了一个拦截器那么全局的就被覆盖，只执行这一个 -->
            <interceptor-ref name="myinterceptor1"/>
            <interceptor-ref name="myinterceptor2"/>
            <result name="success">/jsp/1.jsp</result>
        </action>

        <!-- 方法拦截器 -->
        <action name="ad22" class="com.xiaojihua.struts.action.ActionDemo22" method="findAll">
            <interceptor-ref name="myinterceptor3"/>
            <result name="success">/jsp/1.jsp</result>
        </action>
    </package>
</struts>