<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!-- IOC、注入 -->
    <!-- 加载数据库配置文件-->
    <context:property-placeholder location="classpath*:jdbc.properties"/>
    <!-- 配置数据源-->
    <bean id="c3p0" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <!-- 配置hibernate sessionFactory
         spring集成hibernate的第二种方式
         将hibernate的配置文件相关信息在这里设置
         由此可去掉hibernate的配置文件
    -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <!-- 加载hibernate的配置文件 -->
        <!--<property name="configLocations">
            <list>
                <value>classpath:hibernate.cfg.xml</value>
            </list>
        </property>-->

        <!-- 要将hibernate配置文件信息集成到这里面需要一下三类信息-->
        <!-- 1、设置数据库链接信息（数据源） -->
        <property name="dataSource" ref="c3p0"/>
        <!-- 2、配置hibernate相关参数-->
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
            </props>
        </property>
        <!-- 3、加载映射文件-->
        <property name="mappingResources">
            <list>
                <value>com/xiaojihua/domain/User.hbm.xml</value>
            </list>
        </property>
    </bean>
    <!-- hibernateTemplate -->
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
        <!-- 需要注入sessionFactory -->
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- 在dao中使用hibernateTemplate
         如果dao集成了hibernatedatasupport则
         注入到hibernatedatasupport中的hibernateTemplate属性
         在dao中可以通过getHibernateTemplate来获取template使用
    -->
    <bean name="userDao" class="com.xiaojihua.daoImpl.UserDaoImpl">
        <property name="hibernateTemplate" ref="hibernateTemplate"/>
    </bean>

    <bean name="userService" class="com.xiaojihua.serviceImpl.UserServiceImpl">
        <property name="dao" ref="userDao"/>
    </bean>

    <!-- 配置struts2的action 注意scope必须是prototype-->
    <bean name="userAction" class="com.xiaojihua.web.UserAction" scope="prototype">
        <property name="service" ref="userService"/>
    </bean>


    <!-- 配置事物管理
         事物管理器相当于增强类，里面有各种增强方法
         对于hibernate spring的事物管理器使用  操作session
         org.springframework.orm.hibernate5.HibernateTransactionManager
         对于操作jdbc connection的事物管理器使用
         DataSourceTransactionManager
    -->
    <bean id="transcationManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <!--
             从配置的sessionFactory中获取session
             将获取的该session开启事务
              并且将开启了事务的该session绑定到了当前线程中
        -->
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!-- 配置事物管理 配置增强类为一个事物增强 -->
    <tx:advice id="txAdvice" transaction-manager="transcationManager">
        <tx:attributes>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
    <!-- 织入-->
    <aop:config>
        <!-- 切点 -->
        <aop:pointcut id="pointcut1" expression="execution(* com.xiaojihua.serviceImpl.*.*(..))"/>
        <!-- aop切面-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut1"/>
    </aop:config>

</beans>