<?xml version="1.0" encoding="UTF-8"?>
<!-- 这里有个小问题，当写上这些约束的时候，idea提示找不到对应的约束文件
     解决方式是导入本地约束文件
     settings搜索schema然后再schemas and DTDS中设置本地文件
     url是下面的xmlns
     file是约束文件的本地地址。
     其实约束文件主要是在开发环境中使用，用于约束xml文件的格式，
     发布到生产环境中，即使生产环境无法链接外网（找不到约束文件）也无关系。
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- bean definitions here -->

    <!--

		1: 基本配置
			bean标签: 指定要创建的实体类
			id属性: 可以为任意值  但是在整个配置文件中唯一
		    class属性: 要实例化类的全限定名 反射

	 -->
    <!--<bean id="user" class="com.xiaojihua.domain.User"></bean>-->

    <!--
        2: scope属性: 范围
			    singleton: 单实例 默认值
			    	 如果是单实例,配置文件文件只要一加载  就会创建对象 放在spring容器 (map<id,对象>)
			    	 当所有人过来问spring容器要的时候(getBean),所用人用的都是同一个对象
			    prototype: 多实例
				     如果是多实例,配置文件加载,不创建对象
				     每个人过来getbean的时候,getbean一次创建一次 放在容器中

	    什么时候用默认值singleton(单实例)? 什么时候用prototype(多实例)?
		    struts的action: prototype，因为struts的action本身就是多实例的，请求一次创建一次
		    service/dao: singleton
     -->
    <!--<bean id="user" class="com.xiaojihua.domain.User" scope="singleton"></bean>-->
    <!--<bean id="user" class="com.xiaojihua.domain.User" scope="prototype"></bean>-->

    <!--
        3 了解
		    singleton的对象什么时候销毁? prototype创建出来的对象什么时候销毁?
			    singleton的对象当spring容器关闭 对象销毁
			    prototype的对象 长时间不用自动被垃圾回收机制给回收了

		    init-method:指定初始化方法
		    destory-method:指定销毁方法
     -->
<!--
    <bean id="user" class="com.xiaojihua.domain.User" scope="singleton" init-method="init" destroy-method="destory"></bean>
-->
<!--
    <bean id="user" class="com.xiaojihua.domain.User" scope="prototype" init-method="init" destroy-method="destory"></bean>
-->


    <!-- 
   		 3 import:导入外部的配置文件
   		 	    resource:外部配置文件的地址
   			web: 所有在web层创建的对象   applicationContext_waeb.xml
   			service:所有在service层创建的对象   applicationContext_service.xml
   			dao:所有在dao层创建的对象   applicationContext_dao.xml
   			
   			<import resource="applicationContext_web.xml"/>
   			<import resource="applicationContext_service.xml"/>
   			<import resource="applicationContext_dao.xml"/>	
   			
   			
   			<import resource="applicationContext_user.xml"/> 	
   	 -->
    <!--<import resource="applicationContext_user.xml"/>-->


    <!-- bean的三种创建方式
   		 无参构造方式
   		 静态工厂方式(了解)
   		 实例工厂方式(了解)

   	  -->
    <!-- 无参构造方式 -->
    <!--<bean id="user" class="com.xiaojihua.domain.User"/>-->

    <!-- 静态工厂方式(了解)
         class指定相应的beanFactory
         factory-method指定bean工厂的静态方法
         条件:需要有一个工厂类 在这个工厂类中还需要有一个静态方法
    -->
    <!--<bean id="user" class="com.xiaojihua.utils.BeanFactory" factory-method="createUser"/>-->

    <!-- 实例工厂(了解)
        条件:需要有一个工厂类 在这个工厂类中还需要有一个普通方法
    -->
    <bean id="beanFactory" class="com.xiaojihua.utils.BeanFactory"/>
    <bean id="user" factory-bean="beanFactory" factory-method="createUser"/>





    <!--
   			DI的注入方式:
   				   1 构造器的方式
   				   	 条件:需要有参构造方法

   		             构造器的方式
   	 			     name:要赋值的属性名
   	 			     value:要赋的值 (针对的是基本类型和String类型)
   	 			     ref: 针对的是对象类型

   	 -->
    <bean id="car" class="com.xiaojihua.serviceImp.CarImpl">
        <constructor-arg name="name" value="BMW"></constructor-arg>
        <constructor-arg name="price" value="2000000"></constructor-arg>
    </bean>

    <!--
   			DI的注入方式:
   				   1 set属性的方式
   				   	 条件:属性必须要有set方法
   				     name:要赋值的属性名
   	 			     value:要赋的值 (针对的是基本类型和String类型)
   	 			     ref: 针对的是对象类型
   	 			 	       指向的是spring中bean的id名
   	 -->
    <!--<bean id="person" class="com.xiaojihua.serviceImp.PersonImpl">
        &lt;!&ndash;set属性的方式&ndash;&gt;
        <property name="name" value="jack"></property>
        <property name="car" ref="car"></property>
    </bean>-->


    <!--
	   			DI的注入方式:
	   				   1 p名称空间的方式
	   				   	 条件: 在配置文件中有p的名称空间
	   				   	      底层set方式  属性还是得有set方法
   	     				  语法:
						<bean p:属性名="属性值" p:属性名-ref="bean的id对象值" >
	   	 -->
    <bean id="person" class="com.xiaojihua.serviceImp.PersonImpl" p:name="rose" p:car-ref="car"/>


    <!-- DI:复杂属性注入 -->
    <bean id="collBean" class="com.xiaojihua.domain.CollBean">
        <property name="ss">
            <list>
                <!-- 数组类型 -->
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </list>
        </property>
        <property name="ll">
            <!-- list类型  -->
            <list>
                <value>111</value>
                <value>222</value>
                <ref bean="car"/>
            </list>
        </property>

        <property name="mm">
            <!-- map -->
            <map>
                <entry key="k1" value="aaa"></entry>
                <entry key="k2" value="bbbb"></entry>
                <entry key="k3" value-ref="car"></entry>
            </map>
        </property>
        
        <property name="properties">
            <!-- properties类型 -->
            <props>
                <prop key="hibernate.username">root</prop>
                <prop key="hibernate.password">1234</prop>
            </props>
        </property>
    </bean>

    <!-- spring 集成数据源，c3p0，使用set注入的方式注入相关参数 -->
    <bean id="c3p0" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver"></property>
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/hibernate"></property>
        <property name="user" value="root"></property>
        <property name="password" value="root"></property>
    </bean>

    <!-- spring 集成数据源，c3p0，使用set注入的方式注入相关参数 -->
    <bean id="dbcp" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://localhost:3306/hibernate"></property>
        <property name="username" value="root"></property>
        <property name="password" value="root"></property>
    </bean>

    <!-- 让spring能够加载jdbc.properties文件
		 spring提供了一个标签 可以加载外部的properties文件内容
		 导context的名称空间和约束 才会有提示
	-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <bean id="c3p0forprop" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"></property>
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>
</beans>